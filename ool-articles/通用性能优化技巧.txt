1.批量操作：将多个单独的操作合并成一个，只与对方交互一次。
	mysql的批量插入，批量更新
	mysql的MRR，通过普通索引批量查询出id列表，然后一起去主键索引查询
	JVM的TLAB(Thread Local Allocation Buffer)，批量申请内存
	kafka的批量写入，批量发送
	ES的批量操作bulk

2.WAL:预写日志（写内存+顺序日志）
	mysql的wal，写入内存和redo log 就可，等之后刷脏页才真正写入文件
	mysql更新数据时，如果内存页没有，且是非唯一索引时，会先写入change buffer，后面再merge。
	es的Translog，数据索引前，会先写入到日志文件中。假如节点挂了，重启节点时就会重放日志，保证了数据的不丢失。
	
3.空间换时间，把计算结果预先保存在一张表中，实际要用直接到表中去取。
	jvm的虚方法调用，通过方法表保存调用逻辑，用以快速定位目标方法，实际调用时直接通过方法表查询。
	jvm的异常实现，在编译生成的字节码中，每个方法都附带一个异常表，有异常发生直接查表执行即可。

4.当复制时同时提供写入的算法：使用一个temp文件来保存写入的内容，等复制完成后再把temp应用到新的文件。
	mysql的Online DDL
	redis执行save时，把当前的修改写到aof增量buf中。

梳理学习中间件的配置项：
我们使用一些开源中间件，为了让它和我们的业务更加适应，可以修改源代码，很多大公司就是这样做的，而且往往能够在原基础上退出自己改进后的中间件。而大部分公司不具备这样的实力，只能优化配置项，所以一个很重要的学习方向是把所有的配置项都梳理学习一遍，以便在需要的时候通过修改配置项来改进系统。同样的，大公司在修改源码之前也是对配置项进行优化的。
而且对配置项的理解，可以加深对系统原理的理解。所以，系统学习配置项是非常重要的。
	