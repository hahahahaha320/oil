数据结构就是一个数据容器，可以容纳多个数据，可以在数据容器上对数据进行增删改查。对数据的不同操作目标衍生出了不同的数据结构。

一。最基本的数据结构（可以用简单几行代码实现的数据结构），可以用来构造其他数据结构：
数组（Array），节点（Node）

二。各种常用的数据结构：
1.线性表(按index取数据）：数组，链表，栈，队列，优先队列（二叉堆）
2.符号表(按key取数据)：散列表HashTable，二叉查找树BST（平衡二叉查找树，也就是红黑树）,SkipList

三。高级数据结构:线段树(区间树)，树状数组 ，单词树(前缀树，字典树，Trie;又称单词查找树)，LSM-Tree(The Log-Structured Merge-Tree)，B-树


对数据结构的常见操作：
排序，遍历，
查找（按index和按key取数据），插入，修改，删除
取最大值，取最小值，范围查找。



常用算法专题：
1.字符串相关算法专题：
子字符串查找：kmp方法，单词查找树
字符串压缩：霍夫曼压缩


2.网络流算法专题：


3.图算法专题：
数据结构：邻接表数组(数组+链表)，
顶点一般记为v(vertex)，顶点数记为V，边记为e(edge)，边数记为E，领接表记为adj = Set[]
深度优先搜索dfs，广度优先搜索bfs，加权图的最小生成树(核心：切分定理)，加权有向图的最短路径(某个顶点的最短路径树)(核心：边的放松操作)

dijkstra 发音：狄克斯特拉

4.索引专题：正向索引，反向索引
举例：人们默认认为把存储文章id和文章内容（由word列表组成）存储在一起，这是“正向的”，而所谓索引的正向反向就是看是否和默认的存储方式相符:
正向索引（和存储方式相符的索引）:在“正向的”存储方式下，用文章id查出本文章包含的word列表是很自然的，所以用文章id做索引是自然的，所以叫正向索引。
反向索引（和存储方式相反的索引）:在“正向的”存储方式下，用word查找有包含本word的文章id列表是低效率的，需要全表扫描。
所以我们重新建立word和文章id列表的关联关系，而这是和之前“正向的”存储相反的，所以这样的关联关系叫反向索引。



